<?php

namespace common\models;

use backend\models\BaseModel;
use backend\models\Empresa;
use backend\modules\contabilidad\models\EmpresaPeriodoContable;
use Exception;
use Yii;

/**
 * This is the model class for table "core_parametro_sistema".
 *
 * @property string $id
 * @property string $nombre
 * @property string $valor
 * @property string $replicate_to
 * @property string $replicate_as
 */
class ParametroSistema extends BaseModel
{
    public $replicate_to;
    public $replicate_as;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'core_parametro_sistema';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['nombre', 'valor'], 'required'],
            [['nombre', 'valor'], 'string', 'max' => 45],
            [['nombre'], 'unique'],

            [['replicate_to', 'replicate_as'], 'safe'],
            [['replicate_to', 'replicate_as'], 'checkValidation'],
        ];
    }

    public function checkValidation($attribute, $params)
    {
        if ($this->replicate_to == '' && $this->replicate_as != '') {
            $this->addError('replicate_as', "\"{$this->getAttributeLabel('replicate_as')}\" solamente es necesario cuando \"{$this->getAttributeLabel('replicate_to')}\" no es vacío");
        }
        if ($this->replicate_to != '' && $this->replicate_as == '') {
            $this->addError('replicate_as', "\"{$this->getAttributeLabel('replicate_as')}\" es estrictamente necesario cuando \"{$this->getAttributeLabel('replicate_to')}\" no es vacío");
        }
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'nombre' => Yii::t('app', 'Nombre'),
            'valor' => Yii::t('app', 'Valor'),
            'replicate_to' => "Replicar a",
            'replicate_as' => "Replicar como",
        ];
    }

    public static function getMonedaBaseId()
    {
        return 1;
    }

    /**
     * @param bool $insert
     * @param array $changedAttributes
     * @throws Exception
     */
    public function afterSave($insert, $changedAttributes)
    {
        $this->performReplication();

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * @throws Exception
     */
    public function performReplication()
    {
        if ($this->replicate_to == 'contabilidad') {
            if (class_exists('\backend\modules\contabilidad\MainModule')) {
                $parm_cont = \backend\modules\contabilidad\models\ParametroSistema::findOne(['nombre' => $this->nombre]);

                if ($this->replicate_as == 'create' && isset($parm_cont)) {
                    $parm_cont = null;
                } else {
                    if (!isset($parm_cont)) {
                        $parm_cont = new \backend\modules\contabilidad\models\ParametroSistema();
                    }
                }

                if (isset($parm_cont)) {
                    $parm_cont->nombre = trim($this->nombre);
                    $parm_cont->valor = trim($this->valor);
                    if (!$parm_cont->save()) {
                        throw new Exception("No se pudo crear nuevo parámetro de contabilidad: {$parm_cont->getErrorSummaryAsString()}");
                    }
                }
            }
        } elseif ($this->replicate_to == 'empresa') {
            if (class_exists('\backend\modules\contabilidad\MainModule')) {
                /** @var Empresa $empresa */
                foreach (Empresa::find()->all() as $empresa) {
                    foreach (EmpresaPeriodoContable::findAll(['empresa_id' => $empresa->id]) as $periodo_contable) {
                        $nombre = trim($this->nombre);
                        $nombre = "core_empresa-{$empresa->id}-periodo-{$periodo_contable->id}-{$nombre}";
                        $valor = trim($this->valor);
                        $parm_cont = \backend\modules\contabilidad\models\ParametroSistema::findOne(['nombre' => $nombre]);

                        if ($this->replicate_as == 'create' && isset($parm_cont)) {
                            $parm_cont = null;
                        } else {
                            if (!isset($parm_cont)) {
                                $parm_cont = new \backend\modules\contabilidad\models\ParametroSistema();
                            }
                        }

                        if (isset($parm_cont)) {
                            $parm_cont->nombre = $nombre;
                            $parm_cont->valor = $valor;
                            if (!$parm_cont->save()) {
                                throw new Exception("No se pudo crear nuevo parámetro de contabilidad: {$parm_cont->getErrorSummaryAsString()}");
                            }
                        }
                    }
                }
            }
        }
    }

    public static function getRucGenericoSinDV(){
        $rucs = ParametroSistema::find()->where(['nombre'=> 'contabilidad-ruc-generico-libro-venta' ])->one()->valor;
        $rucs = explode(',',$rucs);
        $rucsSinDv = [];
        foreach($rucs as $_ruc){
            $rucsSinDv[] = explode('-',$_ruc)[0];
        }
        return $rucsSinDv;
    }
}
